#!/usr/bin/perl -s

##################################################################
#   Program:        FreeCaptcha                                  #
#   Author:         Luis Gustavo Rodriguez (drlouie)             #
#   Copyright:      (c) 2009 Luis G. Rodriguez                   #
#   Licensing:      MIT License                                  #
#                                                                #
#   About                                                        #
#        Type:      Captcha Generator : Visual and Audible       #
#        Module:    Core Program: Visual                         #
#                                                                #
##################################################################################
# Permission is hereby granted, free of charge, to any person obtaining a copy   #
# of this software and associated documentation files (the "Software"), to deal  #
# in the Software without restriction, including without limitation the rights   #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      #
# copies of the Software, and to permit persons to whom the Software is          #
# furnished to do so, subject to the following conditions:                       #
#                                                                                #
# The above copyright notice and this permission notice shall be included in all #
# copies or substantial portions of the Software.                                #
#                                                                                #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  #
# SOFTWARE.                                                                      #
############################################################################################
#                              What does Captcha mean?                                     #
# (C)ompletely (A)utomated (P)ublic (T)uring test to tell (C)omputers and (H)umans (A)part #
############################################################################################

$perlCompileOS = $^O;
if ($perlCompileOS =~ m/Win/i) {
	$HTTPRoot = 'H:/dvwf/rbsd_IO/vhosts/vsnet/htdocsNEW/';
	$PathToFonts = 'H:/tmp/fonts/';
}
else {
	$HTTPRoot = '/var/www/vps-net.com/htdocs/';
	$PathToFonts = '/usr/share/fonts/';
}

## -- gesichtDeEsel -- ##

#################################################################################################
###### CREATE VISUAL CONFIRMATION IMAGE BY CALLING THIS EXECUTABLE AS IMAGE REFERENCE/SOURCE 
###### [make every call to this script unique by using datetime string on the http call]
###### Spit dynamic image back to end-user [along with the cookie being set to: elCrypto]
#################################################################################################

##-> Snif cookie, find cookie data [test for logged in status]
$logreq = 0; ##-> [logreq = 0] LOGin IS NOT REQuired ( but we remove this checker to customize our login prompt )
$ECkey = 'chuiechuie'; ##-> set cookie key for IMVER [only for eyeCaptcha functions]
require ($HTTPRoot."cookiesnif.nsp");
##-> load query parser [get/post]
require ($HTTPRoot."q.nsp");

##-> load locale [to make string to lowercase lc($var)]
use locale;

##-> load CGI and CGI::Carp [windows didnt work without this]
use CGI;
use CGI::Carp qw(fatalsToBrowser);

##-> to generate captcha code(string)
use Image::VisualConfirmation;
##-> to create our captcha image
use GD::SecurityImage;
##-> load database interface module
use DBI;
## -> initiate connection to DB using MYSQL DBNAME[vpsnetcom] USER[vpsnetcom] PASS[c4!nCh|aT0n3555]
$dbh = DBI->connect('DBI:mysql:vpsnetcom','vpsnetcom','c4!nCh|aT0n3555') or die "Unable to connect to database\n";
$dbh->{RaiseError} = 1;

##- 
##- FONT SELECTION
##- 
##- SET OUR INTERNAL PRESELECTED VALUE FOR: fontSelection [can only be set by internal/local program calls]
if ($icall == 1) { $preSelFont = 47; }
##- BY-PASS ALL OPTIONS AND FLAG AS randomFont [internal OR query string]
elsif ($ranFont == 1 || $FORM{'rf'}) { $ranFont = 1; }
##- BY-PASS ALL OPTIONS AND FLAG AS DynamicQueryFont [interal || query string]
elsif (int($useFont) >= 1 || int($FORM{'uf'}) >= 1) { 
	##-- [query string]
	if (int($FORM{'uf'}) >= 1) { $useFont = int($FORM{'uf'}); }
}
##- SET THE DEFAULT VALUE FOR: fontSelection [failsafe]
else { $defaultFontSel = 45; }





	##--> 
	##--> LOAD DYNAMIC FONTS
	##--> 

	##-- load fonts [each font must have its own PTSIZE specification in DB since each font varies in size]
	##-- 4 fontSelection options to choose from 
	##-- [default, dynamic (query string), preselected (account), random (failsafe)]

	##-- preselected (account OR internal)
	if (int($preSelFont) >= 1 || int($defaultFontSel) >= 1 || int($useFont) >= 1) {
		if (int($preSelFont) >= 1) { $thisFontSelection = $preSelFont; } ##--> internal call / presel
		elsif (int($useFont) >= 1) { $thisFontSelection = $useFont; } ##--> internal / query
		else { $thisFontSelection = $defaultFontSel; } ##--> default

		##--- invoke selectedFont call
		@gfont = &selectedFont($thisFontSelection);

		##--- counter any unforseen future error possibilities [if font's FileName, as returned, is less than 5 characters long, IS ERROR, simply revert to random]
		if (length($gfont[0]) < 5) { &randomFont; } 
		##--- good return from selectedFont subroutine [use this as our font selection]
		else {
			$selectedFont = $gfont[0];
			$ptsize = $gfont[1];
		}
	}
	##- random (used as failsafe for all other options including $ranFont)
	else { &randomFont; }


	
	

	##--> RUN CAPTCHA GENERATOR
	&CaptchaGenerator;



##--> 
##--> START CAPTCHA GENERATOR
##--> 
sub CaptchaGenerator {
	##-- location of font we are using [all our fonts for captcha are located at /tmp/fonts/]
  	my $font  = "$PathToFonts" . $selectedFont;
	
	##-- invoke I::VC to generate our code word [THIS OLD CAPTCHA MODULE IS ONLY USED FOR ITS code(string) GENERATION FUNCTION]
	my $vc = Image::VisualConfirmation->new({font_size   => 30});
	##-- generate and retrieve code(string)
    $myRandomCode = $vc->code;

	##-- make captcha code(string) UPPERCASE so its easier to read
	$myRandomCode = uc($myRandomCode);
	
	##-- set parameters for the captcha image generator
	my $image = GD::SecurityImage->new(
		width  =>   170,
		height =>    65,
		frame  =>     0, # disable borders
		ptsize => $ptsize,
		##-	  scramble => 1, ##-scrable text [not too neat looking]
		##- therefore we have introduced shifting[random] fonts instead [cooler looking, no as easy to decypher by machine than using just one font]
      	font   => $font
	);
   
	##-- TWO METHODS FOR THE code(string) WE WILL BE USING AS OUR CAPTCHA
	##-- 
	##-- METHOD ONE: GENERATE OUR OWN code(string) AND PASS IT TO random() [if we dont make and pass our own string the random() string will be numeric only, but we'd rather have a alpha-numeric string]
	##-- $myRandomCode = 'GRINGO'; 				##- generate our own code(string) [alpha-numeric for highest possible security]
	##-- $image->random($myRandomCode); 			##- now pass that code(string) to the image generator random()
	##-- 
	##-- OR
	##-- 
	##-- METHOD TWO: LET GD::SecurityImage generate the random code(string) on its own [will always be a 6 digit number, unless otherwise specified]
	##-- $image->random(); 					##- generate the random code(string) [for the image generator]
	##-- $myRandomCode = $image->random_str(); 	##- now retrive the random code(string) [as string]

	##-- using my own string generator, I generate a random code(string) that's SIX characters long
	$image->random($myRandomCode);

	##-- use the blank style, so that nothing will be drawn to distort the image.
	$image->create( ttf => 'blank', '#1841B7' );
	
	##-- IN CASE WE WANT TO ADD AN INFORMATION ON THE CAPTCHA IMAGE
	##-- $image->info_text(
	##-- x      => 'left',
	##-- y      => 'up',
	##-- text   => 'eyeCaptcha (eyecaptcha.vps-net.com)',
	##-- ptsize => 10,
	##-- strip  =>  0
	##-- );
   
   	##-- generate the image
   	my($image_data, $mime, $random) = $image->out;
	
   	##-- generate the image
	$LOWVCcode = lc($myRandomCode);

	##-- add first layer of encryption
	#- use Crypt::Tea;
	use Crypt::Tea_JS;
	$ECcode = &encrypt ($LOWVCcode, $ECkey);

	###--- WAS WORKING ON UNIX BEFORE THIS CHANGE
	###--- CHANGED TO OVERCOME WINDOWS NON-USE OF CRYPT() FUNCTION WHICH MYSQL USES TO ENCRYPT()
	use Crypt::UnixCrypt;
  	my $elCrypto = crypt("$ECcode",":X");

	##-- remove the key
	$theCrypto = substr $elCrypto, 2;

	##-- $Cookies{'IMVER'} :: captchaCode = removeFirst(2) + encrypt(tea)
	##-- $Cookies{'VPSFC'} :: captchaCode = removeFirst(2) + encrypt(tea) + encrypt(UXCRYPT)

   	##-- print out content type header [open]
	print "Content-type: image/png\n";
   		##-- set the eyeVerify cookie [used to test for valid code upon form being submitted]
		&SetCookies('IMVER',$ECcode); ##- ENCRYPT 1x: tea
		&SetCookies('VPSFC',$theCrypto); ##- ENCRYPT 2x: UXCRYPT
   	##-- print out content type header [close]
	print "\n";

	##-- print out the binary image data
	print "$image_data";

	##--> 
	##--> END CAPTCHA GENERATOR
	##--> 
}

$dbh->disconnect;

##-> exit script
exit;



##> 
##> DB FONT QUERY SUBROUTINES
##> 

sub randomFont {
	my $sth = $dbh->prepare("SELECT FileName, PointSize FROM Fontastic order by rand() limit 1");
	$sth->execute;
	my $row = $sth->fetchrow_arrayref;
	$selectedFont = $row->[0];
	$ptsize = int($row->[1]);
	$sth->finish;
}

sub selectedFont {
	my $sfont=int($_[0]);
	my $sth = $dbh->prepare("SELECT FileName, PointSize FROM Fontastic WHERE FID='$sfont'");
	$sth->execute;
	my $row = $sth->fetchrow_arrayref;
	$seF = $row->[0];
	$pt = int($row->[1]);
	$sth->finish;
	return($seF, $pt);
}	

