################################################################
#   Program:    FreeCaptcha String Obfuscation & Salting View  #
#   Author:     Luis Gustavo Rodriguez (drlouie)               #
#   Copyright:  (c) 2016 Luis G. Rodriguez                     #
#   Licensing:  MIT License                                    #
##################################################################################
# Permission is hereby granted, free of charge, to any person obtaining a copy   #
# of this software and associated documentation files (the "Software"), to deal  #
# in the Software without restriction, including without limitation the rights   #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      #
# copies of the Software, and to permit persons to whom the Software is          #
# furnished to do so, subject to the following conditions:                       #
#                                                                                #
# The above copyright notice and this permission notice shall be included in all #
# copies or substantial portions of the Software.                                #
#                                                                                #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  #
# SOFTWARE.                                                                      #
##################################################################################

##### START BEST #####

	use Net::IPAddress::Minimal ('invert_ip');
	my $input_string = $ENV{'REMOTE_ADDR'};
	my $numericIP = invert_ip( $input_string );
	if ($numericIP =~ m/[^0-9]/) { print "<script>alert('IP Address Error. Fix your IP address.');</script>"; exit; }

	use Data::UUID;
	$myHASH = $numericIP . '-' . int($cartID);
	
	##-- some salty substitutions
	$myHASH =~ s/0/N/gi; $myHASH =~ s/1/E/gi; $myHASH =~ s/2/T/gi; $myHASH =~ s/3/W/gi; $myHASH =~ s/4/O/gi; $myHASH =~ s/5/R/gi; $myHASH =~ s/6/K/gi; $myHASH =~ s/7/S/gi; $myHASH =~ s/8/P/gi; $myHASH =~ s/9/V/gi;

  	$ug = new Data::UUID;
	$uuid = $ug->to_string("$myHASH");
	$myUID = $uuid;
	$myUID =~ s/[^a-zA-Z0-9]//g;
	###----hashes from same ip address look similar up to the end of string, which is the cart id portion of it [always unique, unless two people from same IP address visit site at exactly the same second, virtually impossible] 
	###---->> $dateCap = $datetime
	

	###REFORM UID FROM COOKIE PER SE
	##-- add dashes to reformat UUID 8,4,4,4,12
	$remadeUID = substr($myUID,0,8) . '-' . substr($myUID,8,4) . '-' . substr($myUID,12,4) . '-' . substr($myUID,16,4) . '-' . substr($myUID,20,32);
  	$ug2 = new Data::UUID;
	$uuid2 = $ug2->from_string($remadeUID);
	$uuid2 =~ s/[^a-zA-Z0-9-]//g;

	##--deSalt
	$uuid2 =~ s/N/0/gi; $uuid2 =~ s/E/1/gi; $uuid2 =~ s/T/2/gi; $uuid2 =~ s/W/3/gi; $uuid2 =~ s/O/4/gi; $uuid2 =~ s/R/5/gi; $uuid2 =~ s/K/6/gi; $uuid2 =~ s/S/7/gi; $uuid2 =~ s/P/8/gi; $uuid2 =~ s/V/9/gi;

	print "<script>alert('$myHASH :: $uuid :: $myUID :: $remadeUID :: $uuid2 ');</script>";

##### END BEST #####








##### START OLD #####
		use Data::UUID;
  		$IP = "$ENV{'REMOTE_ADDR'}" . "$date2" . "$time";
  		$ug    = new Data::UUID;
		$uuid = $ug->create_from_name_str(NameSpace_OID, "$IP");
		@splitUID = split(/-/,$uuid);
		$myUID = join(//,@splitUID);
##### END OLD #####











































	##-- add dashes to reformat UUID 8,4,4,4,12
	$remadeUID = substr($inUID,0,8) . '-' . substr($inUID,8,4) . '-' . substr($inUID,12,4) . '-' . substr($inUID,16,4) . '-' . substr($inUID,20,32);

	use Net::IPAddress::Minimal ('invert_ip');
	my $input_string = $ENV{'REMOTE_ADDR'};
	my $output = invert_ip( $input_string );
	if ($output =~ m/[^0-9]/) {
		print "<script>alert('IP Address Error');</script>";
	}
	
	
	
	###--> NPIP = numeric presentation of IP ($output)
	###--> datetime will always be higher than the NPIP of the highest possible IP address in the Classful Class C space (223.255.255.255)
	### (datetime - NPIP) = calculatedNameSpace
	###--> OUTPUT FORMAT: NPIP-calculatedNameSpace

	use Data::UUID;
  	$dato = "$date2" . "$time"; $midato = $dato; $dato =~ s/://gi; $dato =~ s/\///gi; $dato =~ s/\.//gi;
	$OGoutput = $output;
	if (length($output) < length($dato)) {
		$pad_len = length($dato)-1;
		$output = reverse(split(//,$output));
 		$padded = sprintf("%0${pad_len}d", $output);
		$output = reverse(split(//,$padded));
	}
	$calcNS = ($dato - $output);
	$myDATA = $calcNS . "-" . $pad_len;
  	#$ug = new Data::UUID;
	#$uuid = $ug->to_string("$myDATA");
	#@splitUID = split(/-/,$uuid);
	#$myUID = join(//,@splitUID);
  	#$ug2 = new Data::UUID;
	#$uuid2 = $ug2->from_string($uuid);
	print "<script>alert('$OGoutput :: $padded :: $output :: $midato :: $myDATA :: $calcNS');</script>";
